//equipmentContract = new ethers.Contract(AWE.address, AWE.abi, provider);var provider;var signer;var account;var allaccounts;var ContractWS;var BUSDContractWS;var networkid;var firsttime = false;var tokenname;var busdaddress;var contrataddress;async function connectwallet() {    ethereum.request({        method: 'eth_requestAccounts'    }).then(() => {        // after connection, we can get values        provider = new ethers.providers.Web3Provider(window.ethereum);        signer = provider.getSigner();        setinfos()    });}async function setinfos() {    if (firsttime) {        return 0;    }    allaccounts = await provider.listAccounts()    account = allaccounts[0];    document.getElementById("walletid").innerHTML = account;    var connectinfo = await provider.getNetwork();    networkid = connectinfo.chainId;    console.log(networkid)    if (networkid == 56) {        contrataddress = BINANCE.contrat        tokenname = BINANCE.tokenname    }    if (networkid == 137) {        contrataddress = POLYGON.contrat        tokenname = POLYGON.tokenname    }    if (networkid == 43114) {        contrataddress = AVAX.contrat        tokenname = AVAX.tokenname    }    //equipmentContract = new ethers.Contract(AWE.address, AWE.abi, provider);    if (contrataddress != undefined) {        console.log("WE CAN PLAY ON NETWORK")        ContractWS = new ethers.Contract(contrataddress, GAME.abi, signer);        var owner = await ContractWS.getowner();        if (owner == account) {            console.log("YOU ARE OWNER")            document.getElementById("ownerdiv").style.display = "Block";            var totalhave = await ContractWS.totalhaves();            var ethValue2 = ethers.utils.formatEther(totalhave.toString());            document.getElementById("totalhave").innerHTML = "TOTAL HAVE : " + ethValue2.slice(0, 6);        }        var wei = await ContractWS.playerbalance()        var ethValue = ethers.utils.formatEther(wei.toString());        document.getElementById("gameamount").placeholder = "Min 0.01 " + tokenname        document.getElementById("balance").innerHTML = "Your Balance - " + ethValue.slice(0, 6) + " " + tokenname;        document.getElementById("connectwalletbutton").setAttribute('onclick', 'updatebalance()')        document.getElementById("connectwalletbutton").innerHTML = "Update Balance";        //const ethValue = ethers.utils.formatEther(weiValue);    } else {        alert("WE DONT HAVE THIS NETWORK PLS CHANGE NETWORK")    }}async function updatebalance() {    console.log("UPDATEING...")    var wei = await ContractWS.playerbalance()    var ethValue = ethers.utils.formatEther(wei.toString());    document.getElementById("balance").innerHTML = "Your Balance - " + ethValue.slice(0, 6) + " " + tokenname;    var totalhave = await ContractWS.totalhaves();    var ethValue2 = ethers.utils.formatEther(totalhave.toString());    document.getElementById("totalhave").innerHTML = "TOTAL HAVE : " + ethValue2.slice(0, 6);    console.log("UPDATED")}window.addEventListener('load', function() {    connectwallet()})async function deposit() {    var amount = document.getElementById("deposit").value;    ContractWS.deposit({        value: ethers.utils.parseEther(amount)    });}async function withdraw() {    var amount = document.getElementById("Withdraw").value;    ContractWS.withdraw(account, ethers.utils.parseEther(amount));}function winofpage(which) {    var headortail = document.getElementById("cars").value    if (which == "lost" && headortail == "HEAD") {        document.getElementById("imgforheads").setAttribute('class', 'coinimg')        document.getElementById("imgforheads").setAttribute('src', "./photos/" + "TAIL" + ".png")    }    if (which == "lost" && headortail == "TAIL") {        document.getElementById("imgforheads").setAttribute('class', 'coinimg')        document.getElementById("imgforheads").setAttribute('src', "./photos/" + "HEAD" + ".png")    }    if (which == "win") {        document.getElementById("imgforheads").setAttribute('src', "./photos/" + headortail + ".png")    }}async function gameplay() {    var amount = document.getElementById("gameamount").value;    var random = Math.floor(Math.random() * 2)    if (amount >= 0.01) {        var oldbalance = await ContractWS.playerbalance();        oldbalance = oldbalance.toString();        console.log(oldbalance)        let tx = await ContractWS.gameplay(account, random, {            value: ethers.utils.parseEther(amount)        });        var final = await tx.wait();        console.log(final)        var delayInMilliseconds = 10000; //1 second        document.getElementById("balance").innerHTML = "Please Wait Loading..."        document.getElementById("imgforheads").setAttribute('class', 'coinimg animate-coin')        setTimeout(async function() {            while (true) {                var newbalance = await ContractWS.playerbalance();                newbalance = newbalance.toString()                console.log(newbalance)                console.log(oldbalance, "--------")                if (oldbalance != newbalance) {                    if (oldbalance < newbalance) {                        winofpage("win")                        winofpage()                        updatebalance()                        break                    } else {                        winofpage("lost")                        updatebalance()                        break                    }                }            }        }, delayInMilliseconds);    } else {        alert("MIN 0.01 BNB")    }}